---
title: "Interpolating"
author: "Steffi LaZerte"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Interpolating}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


```{r, include = FALSE}
knitr::opts_chunk$set(cache = FALSE,
                      fig.align = "center",
                      fig.path = "vignettes/articles/figures/interp-",
                      dpi = 200,
                      fig.asp = 0.65, fig.width = 5,
                      out.width = "80%")
old <- options(tibble.max_extra_cols = 0)
```

## Packages

You'll need several packages from the **tidyverse** in addition to **`weathercan`** to complete the following analysis.

```{R pck, message = FALSE}
library(weathercan)
library(ggplot2)
library(dplyr)
```

## General usage
You can merge weather data with other data frames by linearly interpolating between points.

For example, here we have a dataset of weather data from Kamloops

```{r}
glimpse(kamloops)
```

As well as a data set of finch visits to an RFID feeder
```{r}
glimpse(finches)
```

Although the times in the weather data do not exactly match those in the finch data, we can merge them together through linear [interpolation](https://en.wikipedia.org/wiki/Linear_interpolation). This function uses the `approx` function from the `stats` package under the hood.

Here we specify that we only want the temperature (`temp`) column:

```{r, error = TRUE, out.width = "100%", fig.width = 8, dpi = 200}
finches_temperature <- weather_interp(data = finches, weather = kamloops, cols = "temp")
```

Ooops! What happened?

Well the weather data on Kamloops returned by `weathercan` has times set in the
'local' timezone (without) daylight savings. For simplicity, these times are
scored as "UTC" according to R.

```{r}
kamloops$time[1:5]
```


The `finches` data, on the other hand, is set in a true timezone:
```{r}
finches$time[1:5]
```

This means that it also has daylight savings applied in the summer, eep!

To interpolate, the data must be in the same timezone. The easiest way forward
is to convert the `finches` data to the same, 'local' time without daylight
savings as the `kamloops` data.

First we'll transform it to non-daylight savings
(i.e. Etc/GMT+8, note that the +8 is [intentionally inverted](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones))
with the `with_tz()` function from the `lubridate` package.

```{r}
finches <- mutate(finches, time = lubridate::with_tz(time, "Etc/GMT+8"))
```

Now we'll force to UTC with the `force_tz()` function from the `lubridate` package.

```{r}
finches <- mutate(finches, time = lubridate::force_tz(time, "UTC"))
```

Now `finches` and `kamloops` data are in the same nominal and actual timezones!

Let's continue

```{r}
finches_temperature <- weather_interp(data = finches, weather = kamloops, cols = "temp")
summary(finches_temperature)
glimpse(finches_temperature)
```

Let's take a look at the interpolate points specifically
```{r}
compare1 <- select(finches_temperature, time, temp)
compare1 <- mutate(compare1, type = "interpolated")
compare2 <- select(kamloops, time, temp)
compare2 <- mutate(compare2, type = "original")
compare <- bind_rows(compare1, compare2)

ggplot(data = compare, aes(x = time, y = temp, colour = type)) +
  geom_point(alpha = 0.5) +
  scale_x_datetime(limits = range(compare1$time))
```

What does this mean for our data?
```{r}
ggplot(data = finches_temperature, aes(x = temp, fill = animal_id)) +
  theme_bw() +
  theme(legend.position = "none") +
  geom_histogram(binwidth = 1) +
  labs(x = "Temperature (C)", y = "Activity Count", fill = "Finch ID")
```

## Data gaps

By default, gaps of 2 hours (or 2 days, with a daily scale) will be interpolated over (i.e. they will be filled with values interpolated from either side of the gap), but longer gaps will be skipped and filled with `NA`s. You can adjust this behaviour with `na_gap`. Note that as Environment and Climate Change Canada data is downloaded on an hourly scale, it makes no sense to apply `na_gap` values of less than 1.

In this example, note the larger number of `NA`s in `temp` and how it corresponds to the missing variables in the weather dataset:

```{r}
finches_temperature <- weather_interp(data = finches, weather = kamloops,
                                      cols = "temp", na_gap = 1)
summary(finches_temperature)

finches_temperature %>%
  select(date, time, temp) %>%
  filter(is.na(temp))

kamloops %>%
  select(time, temp) %>%
  filter(is.na(temp))
```

## Multiple weather columns

We could also add in more than one column at a time:

```{r, out.width = "100%", fig.width = 8, dpi = 200}
finches_weather <- weather_interp(data = finches, weather = kamloops,
                                  cols = c("temp", "wind_spd"))
summary(finches_weather)
glimpse(finches_weather)


finches_weather <- finches_weather %>%
  group_by(date) %>%
  summarize(n = length(time),
            temp = mean(temp),
            wind_spd = mean(wind_spd))

ggplot(data = finches_weather, aes(x = date, y = n)) +
  theme_bw() +
  theme(legend.position = "top") +
  geom_bar(stat = "identity") +
  geom_line(aes(y = temp * 50, colour = "Temperature"), linewidth = 2) +
  geom_line(aes(y = wind_spd * 50, colour = "Wind Speed"), linewidth = 2) +
  scale_colour_discrete(name = "") +
  scale_y_continuous(
    name = "Activity Counts",
    sec.axis = sec_axis(~. / 50, name = "Temperature (C) / Wind Speed (km/h)"))
```


```{r, include = FALSE}
# Reset options
options(old)
```

